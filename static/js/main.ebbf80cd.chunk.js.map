{"version":3,"sources":["moon.png","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","placeholder","src","moon","alt","onClick","modeSwitch","TextForm","useState","text","setText","cols","rows","onChange","event","target","value","console","log","length","upperCase","toUpperCase","currentChar","prevChar","result","flag","str","i","navigator","clipboard","writeText","split","App","setMode","document","body","style","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ebbf80cd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/moon.c7c4d4f9.png\";","import React from 'react'\r\nimport './Navbar.css';\r\nimport PropTypes from 'prop-types'\r\nimport moon from \"../moon.png\"\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    \r\n\r\n    function handleDark(){\r\n       \r\n            props.modeSwitch();\r\n       \r\n        }\r\n        \r\n    return (\r\n        <>  \r\n            <nav className={`flex-container nav-${props.mode}`}>\r\n                <div className=\"left-content flex-container\">\r\n                    <h1><a href=\"/\" className=\"logo\">{props.title}</a></h1>\r\n                </div>\r\n                <div className=\"Links\">\r\n                    <ul className=\"flex-container\">\r\n                        <li><a href=\"/\" className={`txt-${props.mode} lnk`}>Home</a></li>\r\n                        {/* <li><a href=\"/about\" className={`txt-${props.mode} lnk`}>About</a></li>\r\n                        <li><a href=\"/services\" className={`txt-${props.mode} lnk`}>Services</a></li> */}\r\n                    </ul>\r\n                </div>\r\n        \r\n                <div className=\"right-content flex-container\">\r\n                    <input type=\"text\" placeholder=\"Search\" />\r\n                    <button className={`btn-${props.mode}`}>Search</button>\r\n                    <img src={moon} alt=\"\" className=\"mBtn\" onClick={handleDark} />\r\n                </div>\r\n            </nav>    \r\n        </>\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title : PropTypes.string.isRequired\r\n}\r\n\r\n// Navbar.defaultProps = {\r\n//     title : \"Title here\"\r\n// };\r\n\r\n","import React, {useState} from 'react'\r\nimport './TextForm.css';\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleCopy = ()=>{\r\n        navigator.clipboard.writeText(text);\r\n    }\r\n    const handleFormat = ()=>{\r\n        let currentChar;\r\n        let prevChar;\r\n        let result=\"\";\r\n        let flag=0;\r\n        var str = text;\r\n        console.log(str);\r\n        currentChar = str[0];\r\n        prevChar = str[0];\r\n\r\n        for(let i = 0;i<str.length;i++){\r\n            if (flag === 0) {\r\n                if (str[i] !== \" \" && str[i] !== \"\\n\") {\r\n                    flag=1;\r\n                }\r\n            }\r\n            if (flag === 1) {\r\n                currentChar = str[i];\r\n                if (currentChar !== \" \" && currentChar !== \"\\n\") {\r\n                    result += currentChar;\r\n                }\r\n                else{\r\n                    if (prevChar === \" \" || str[(i-2)]===\"\\n\") {\r\n                        continue;\r\n                    }\r\n                    else{\r\n\r\n                        result += currentChar;\r\n                    }\r\n                }\r\n                prevChar = currentChar;\r\n            }\r\n        \r\n        }\r\n\r\n        setText(result);\r\n    }\r\n    const handleClick = ()=>{\r\n        console.log(\"Button Clicked\");\r\n        var upperCase = text.toUpperCase();\r\n        // document.querySelector(\"textarea\").value = upperCase;\r\n        setText(upperCase);\r\n    }\r\n\r\n    const handleChange = (event)=>{\r\n        setText(event.target.value);\r\n        console.log(text);\r\n        if (text.length === 0) {\r\n            \r\n        }\r\n    \r\n    }\r\n    const handleClear = ()=>{\r\n        setText(\"\");\r\n    }\r\n    const [text,setText] = useState(\"\");\r\n    \r\n\r\n    return (\r\n        <>\r\n            <div className=\"main-content flex-container\" >\r\n                <h2 className={`tit my-3 txt-${props.mode}`}>Enter the text to Analyze</h2>\r\n                <textarea placeholder=\"Enter your text here\" cols=\"100\" rows=\"10\" onChange={handleChange} value={text} className={`txt inp-${props.mode}`}></textarea>\r\n                <div className=\"button my-3\">\r\n                    <button className={`btn-${props.mode} mx1-3`} onClick={handleClick}>UpperCase</button>\r\n                    <button className={`btn-${props.mode} mx1-3`} onClick={handleClear}>Clear</button>\r\n                    <button className={`btn-${props.mode} mx1-3`} onClick={handleFormat}>Format</button>\r\n                    <button className={`btn-${props.mode} mx1-3`} onClick={handleCopy}>Copy</button>\r\n                </div>\r\n                \r\n                <table className=\"table my-3\">\r\n                    <tr>\r\n                        <th>Words</th>\r\n                        <td>{text.split(\" \").length}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Characters</th>\r\n                        <td>{text.length}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Sentences</th>\r\n                        <td>{text.split(\".\").length}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Paragraphs</th>\r\n                        <td>{text.split(\"\\n\\n\").length}</td>\r\n                    </tr>\r\n                </table>\r\n                {/* <p className=\"txtData\">{text.split(\" \").length} Words and {text.length} chars</p> */}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState } from 'react';\n// import About from './components/About';\nimport Navbar from './components/Navbar'\nimport TextForm from './components/TextForm';\n// import Services from './components/Services'\n// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//   } from \"react-router-dom\";\n\nfunction App(){\n    const [mode,setMode] = useState('light');\n    const toggle = ()=>{\n        if (mode === 'light') {\n            setMode('dark');\n            document.body.style.background = \"#181818\"\n\n        }\n        else{\n            setMode('light');\n            document.body.style.background = \"white\"\n        }\n    }\n    return(\n        <>\n            {/* <Router>  */}\n                <Navbar title=\"TextUtils\" mode = {mode} modeSwitch={toggle} />  \n                {/* <Switch>\n                    <Route path=\"/services\">\n                        <Services mode={mode} />\n                    </Route>\n                    <Route path=\"/about\">\n                        <About mode={mode} />\n                    </Route>\n                    <Route path=\"/\"> */}\n                        <TextForm mode = {mode}/>\n                    {/* </Route>\n                </Switch>\n            </Router> */}\n        </>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}